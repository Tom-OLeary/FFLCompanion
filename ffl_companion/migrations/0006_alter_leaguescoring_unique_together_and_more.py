# Generated by Django 4.2.14 on 2024-07-25 15:58

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('ffl_companion', '0005_alter_nflteam_abbreviation_and_more'),
    ]

    operations = [
        migrations.AlterUniqueTogether(
            name='leaguescoring',
            unique_together={('scoring_type', 'stat_name')},
        ),
        migrations.AddField(
            model_name='leaguesettings',
            name='scoring',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='league_settings', to='ffl_companion.leaguescoring'),
        ),
        migrations.CreateModel(
            name='Roster',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roster_year', models.IntegerField(default=2024)),
                ('league', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='settings_rosters', to='ffl_companion.leaguesettings')),
                ('team_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='team_rosters', to='ffl_companion.teamowner')),
            ],
            options={
                'db_table': 'rosters',
                'unique_together': {('team_owner_id', 'roster_year')},
            },
        ),
        migrations.RemoveField(
            model_name='leaguescoring',
            name='league_settings',
        ),
        migrations.CreateModel(
            name='PlayerStatsWeekly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_start_year', models.IntegerField(default=2024)),
                ('day_of_week', models.CharField(choices=[('Monday', 'Mon'), ('Tuesday', 'Tue'), ('Wednesday', 'Wed'), ('Thursday', 'Thu'), ('Friday', 'Fri'), ('Saturday', 'Sat'), ('Sunday', 'Sun')], default='Sunday', max_length=9)),
                ('game_date', models.DateField()),
                ('game_week', models.IntegerField(validators=[django.core.validators.MaxValueValidator(17)])),
                ('opponent', models.CharField(max_length=3)),
                ('pass_yds', models.IntegerField(default=0)),
                ('pass_td', models.IntegerField(default=0)),
                ('pass_attempts', models.IntegerField(default=0)),
                ('pass_completions', models.IntegerField(default=0)),
                ('interceptions', models.IntegerField(default=0)),
                ('pass_completion_pct', models.FloatField(default=0.0)),
                ('pass_rating', models.FloatField(default=0.0)),
                ('rush_yds', models.IntegerField(default=0)),
                ('rush_td', models.IntegerField(default=0)),
                ('rush_attempts', models.IntegerField(default=0)),
                ('targets', models.IntegerField(default=0)),
                ('receptions', models.IntegerField(default=0)),
                ('receiving_yards', models.IntegerField(default=0)),
                ('receiving_td', models.IntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats_weekly', to='ffl_companion.nflplayer')),
            ],
            options={
                'db_table': 'player_stats_weekly',
                'unique_together': {('player_id', 'season_start_year', 'game_week')},
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('position', models.CharField(choices=[('QB', 'Qb'), ('WR', 'Wr'), ('TE', 'Te'), ('DEF', 'Def'), ('K', 'K')], max_length=3)),
                ('nfl_teams', models.ManyToManyField(related_name='team_players', to='ffl_companion.nflteam')),
                ('rosters', models.ManyToManyField(related_name='roster_players', to='ffl_companion.roster')),
            ],
            options={
                'db_table': 'players',
                'unique_together': {('name', 'position')},
            },
        ),
    ]
